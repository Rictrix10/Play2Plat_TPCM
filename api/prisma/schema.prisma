datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")

}

generator client {
  provider = "prisma-client-js"
}

model user {
  id                Int               @id @default(autoincrement())
  email             String?            @unique
  username          String?            @unique
  password          String
  avatar            String?
  userType          userType          @relation(fields: [userTypeId], references: [id], onDelete: Cascade)
  userTypeId        Int
  isDeleted         Boolean?
  platforms         platform[]
  avaliations       avaliation[]
  userPlatforms     userPlatform[]
  userGameFavorites userGameFavorite[]
  games             game[]
  userGames         userGame[]
  userGameComments  userGameComment[]
  sentRequests      friendRequest[]  @relation("SentUser")
  receivedRequests  friendRequest[]  @relation("ReceivedUser")
  userOnes          message[]  @relation("UserOne")
  userTwos          message[]  @relation("UserTwo")
  resetToken        String?
  resetTokenExpiry  DateTime?

}

model userType {
  id            Int         @id @default(autoincrement())
  name          String      @unique
  users         user[]
}

model platform {
  id            Int    @id @default(autoincrement())
  name          String @unique
  users         user[]
  games         game[]
  userPlatform  userPlatform[]
  platformGame  platformGame[]
}

model userPlatform {
  id         Int       @id @default(autoincrement())
  user       user      @relation(fields: [userId], references: [id], onDelete: Cascade)
  platform   platform  @relation(fields: [platformId], references: [id], onDelete: Cascade)
  userId     Int
  platformId Int

  @@unique([userId, platformId])
}

model company {
  id      Int    @id @default(autoincrement())
  name    String @unique
  games   game[]
}

model sequence {
  id      Int    @id @default(autoincrement())
  name    String @unique
  games   game[]
}

model genre {
  id            Int    @id @default(autoincrement())
  name          String @unique
  games         game[]
  gameGenres    gameGenre[]
}

model game {
  id                Int         @id @default(autoincrement())
  name              String
  description       String
  isFree            Boolean
  releaseDate       DateTime?
  pegiInfo          Int
  coverImage        String?
  isDeleted         Boolean?
  averageStars      Float?
  sequence          sequence?   @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
  company           company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  sequenceId        Int?
  companyId         Int
  genres            genre[]
  dlcs              dlc[]
  avaliations       avaliation[]
  users             user[]
  platforms         platform[]
  gameGenres        gameGenre[]
  platformGames     platformGame[]
  userGameComments  userGameComment[]
  userGames         userGame[]
  userGameFavorites userGameFavorite[]

}

model platformGame {
  id         Int        @id @default(autoincrement())
  platform   platform   @relation(fields: [platformId], references: [id], onDelete: Cascade)
  game       game       @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId     Int
  platformId Int

  @@unique([platformId, gameId])
}

model userGame {
  id         Int    @id @default(autoincrement())
  state      String
  user       user       @relation(fields: [userId], references: [id], onDelete: Cascade)
  game       game       @relation(fields: [gameId], references: [id], onDelete: Cascade)
  userId     Int
  gameId     Int

  @@unique([userId, gameId])
}

model friendRequest {
  id                      Int        @id @default(autoincrement())
  isAccepted              Boolean
  sentUser       user     @relation("SentUser", fields: [sentUserId], references: [id], onDelete: Cascade)
  receivedUser   user     @relation("ReceivedUser", fields: [receivedUserId], references: [id], onDelete: Cascade)
  sentUserId              Int
  receivedUserId          Int

  @@unique([sentUserId, receivedUserId])
}

model gameGenre {
  id         Int        @id @default(autoincrement())
  game       game       @relation(fields: [gameId], references: [id], onDelete: Cascade)
  genre      genre      @relation(fields: [genreId], references: [id], onDelete: Cascade)
  gameId     Int
  genreId    Int

  @@unique([gameId, genreId])
}

model dlc {
  id        Int         @id @default(autoincrement())
  name      String
  game      game        @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId    Int
}


model avaliation {
  id            Int         @id @default(autoincrement())
  stars         Float
  user          user        @relation(fields: [userId], references: [id], onDelete: Cascade)
  game          game        @relation(fields: [gameId], references: [id], onDelete: Cascade)
  userId        Int
  gameId        Int

  @@unique([userId, gameId])
}

model userGameComment {
  id            Int         @id @default(autoincrement())
  comments      String?
  image         String?
  isAnswer      Int?
  user          user        @relation(fields: [userId], references: [id], onDelete: Cascade)
  game          game        @relation(fields: [gameId], references: [id], onDelete: Cascade)
  userId        Int
  gameId        Int
  date          DateTime?
  latitude      Float?
  longitude     Float?
  location      String?

}

model message {
  id             Int         @id @default(autoincrement())
  message        String?
  image          String?
  isAnswer       Int?
  userOne        user       @relation("UserOne", fields: [userOneId], references: [id], onDelete: Cascade)
  userTwo        user       @relation("UserTwo", fields: [userTwoId], references: [id], onDelete: Cascade)
  userOneId                 Int
  userTwoId                 Int
  date           DateTime?

}

model userGameFavorite {
  id            Int        @id @default(autoincrement())
  user          user       @relation(fields: [userId], references: [id], onDelete: Cascade)
  game          game       @relation(fields: [gameId], references: [id], onDelete: Cascade)
  userId        Int
  gameId        Int

  @@unique([userId, gameId])
}
